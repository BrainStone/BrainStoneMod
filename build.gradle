import groovyx.net.http.HTTPBuilder
import static groovyx.net.http.Method.*
import static groovyx.net.http.ContentType.*

import groovy.json.*

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        jcenter()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.13.0'
        classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.2'
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.0.8"
}
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'forge'

def getChangelog() {
    try {
        return "git log -1 --pretty=%b".execute().text.trim();
    } catch(Exception e) {
        return ''
    }
}
def getVersionType() {
    def lower_version = config.mod_version.toLowerCase();
    
    if (lower_version.contains("prerelease"))
        return "beta";
    else if (lower_version.contains("release"))
        return "release";
    else if (lower_version.contains("dev"))
        return "beta";
    else
        return "alpha";
}
def getVersionName() {
    try {
        def tmp = "git describe --dirty=-SNAPSHOT".execute().text.trim();
        
        if (config.mod_version_prefix.isEmpty())
            return tmp;
        else
            return tmp + " " + config.mod_version_prefix;
    } catch(Exception e) {
      return 'UNKNOWN-VERSION'
    }
}
def signJar(archivePath) {
    if (project.hasProperty('keyStoreAlias') && project.hasProperty('keyStore') && project.hasProperty('keyStorePass')) {
        ant.signjar(
            jar:                  archivePath,
            alias:                project.keyStoreAlias,
            keystore:             project.keyStore,
            storepass:            project.keyStorePass,
            preservelastmodified: true
        )
    } else {
        println 'WARNING!!!\tCannot sign jar!'
    }
}

ext.configFile = file "build.properties"
configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
    
    config.mod_version = getVersionName()
}

def MainDirResources = fileTree(dir: '.', includes: ['*.md', 'CHANGELOG', 'LICENSE'])
version = config.mod_version
group = "brainstonemod" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "BrainStoneMod"

allprojects {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    runDir = "eclipse"
    replace '${version}', project.version
}

dependencies {
    compile "org.projectlombok:lombok:1.16.10"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
    
    from MainDirResources
}

task showVersion {
    description "Displays the current version"
    group "help"
    
    compileJava.dependsOn showVersion
  
    doLast {
        println version
        
        def file = new File(buildDir, '.version');
    
        file.getParentFile().mkdirs();
        file.text = version
    }
    
    outputs.upToDateWhen { false }
}

jar {
    doLast {
        if (!gradle.taskGraph.hasTask(reobf)) {
            signJar(jar.archivePath)
        }
    }
}

reobf {
    doLast {
        signJar(jar.archivePath)
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    
    doLast {
        signJar(deobfJar.archivePath)
    }
}

task srcJar(type: Jar, dependsOn: classes) {
    classifier = 'src'
    duplicatesStrategy = 'exclude'
    
    from sourceSets.main.allSource
    from MainDirResources
    
    doLast {
        signJar(srcJar.archivePath)
    }
    
    srcJar.shouldRunAfter jar
    srcJar.shouldRunAfter deobfJar
}

artifacts {
    archives jar
    archives deobfJar
    archives srcJar
}

curseforge {
    apiKey = project.hasProperty('keyStoreAlias')? project.curseForgeApiKey : 'empty'
    
    project {
        id = '250836'
        changelog = getChangelog()
        releaseType = getVersionType()
        addGameVersion config.minecraft_version
        addGameVersion 'Java 8'
        
        mainArtifact(jar) {
            displayName = config.mod_version
        }
        addArtifact deobfJar
        addArtifact srcJar
        
        relations {
            optionalLibrary 'ender-io'
            optionalLibrary 'minefactory-reloaded'
            optionalLibrary 'tinkers-construct'
            optionalLibrary 'thermal-foundation'
            optionalLibrary 'thaumcraft'
            optionalLibrary 'baubles'
        }
    }
}

task updateDownloadServer {
    dependsOn jar
    dependsOn deobfJar
    dependsOn srcJar
    
    doLast {
        if (!project.hasProperty('secret')) {
            println "Secret needs to be set with the parameter -Psecret=xxx"
            
            return
        }
        
        def http = new HTTPBuilder('http://download.brainstonemod.com/')
        http.request( POST ) {
            uri.path = '/admin/new_version.php'
            requestContentType = URLENC
            body = [
                secret: project.secret,
                version: config.mod_version,
                mc_verion: config.minecraft_version,
                changelog: getChangelog(),
                artifacts: JsonOutput.toJson([
                    universal: jar.archivePath.name,
                    (deobfJar.classifier): deobfJar.archivePath.name,
                    (srcJar.classifier): srcJar.archivePath.name
                ]),
                universal: jar.archivePath.text,
                ("artifact-" + deobfJar.classifier): deobfJar.archivePath.text,
                ("artifact-" + srcJar.classifier): srcJar.archivePath.text
            ]
        
            response.success = { resp, reader ->
                assert resp.status == 200
                println "POST response status: ${resp.statusLine}"
            }
        }
    }
}
