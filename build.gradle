import static groovyx.net.http.ContentType.*
import static groovyx.net.http.Method.*

import groovy.json.*
import groovyx.net.http.HTTPBuilder
import io.franzbecker.gradle.lombok.task.DelombokTask

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.13.0'
        classpath 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.2'
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.0.8"
    id "io.franzbecker.gradle-lombok" version "1.8"
}
apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: 'maven'
apply plugin: 'maven-publish'

def getChangelog() {
    try {
        def tag = "git describe --abbrev=0 --tags".execute().text.trim();
        return ("git tag -l -n99999 " + tag).execute().text.trim().replaceFirst(tag, "").replaceAll("(?m)^\\s+", "")
    } catch(Exception e) {
        return ''
    }
}
def getVersionType() {
    def lower_version = version.toLowerCase();
    
    if (lower_version.contains("beta"))
        return "beta";
    else if (lower_version.contains("alpha"))
        return "alpha";
    else
        return "release";
}
def getVersionName() {
    try {
        def tmp = "${minecraft_version}-" + ("git describe --tags --dirty=-SNAPSHOT".execute().text.trim().substring(1).replaceFirst("(\\d+)-g[0-9a-f]+", "dev\$1"));
        
        if (mod_version_postfix.isEmpty())
            return tmp;
        else
            return tmp.replaceFirst("(.+?-.+)(-)?\$", "\$1-${mod_version_postfix}\$2");
    } catch(Exception e) {
        println e
        return 'UNKNOWN-VERSION'
    }
}
def signJar(archivePath) {
    if (project.hasProperty('keyStoreAlias') && project.hasProperty('keyStore') && project.hasProperty('keyStorePass')) {
        ant.signjar(
            jar:                  archivePath,
            alias:                project.keyStoreAlias,
            keystore:             project.keyStore,
            storepass:            project.keyStorePass,
            preservelastmodified: true
        )
    } else {
        println 'WARNING!!!\tCannot sign jar!'
    }
}

def MainDirResources = fileTree(dir: file('.'), includes: ['README.md', 'LICENSE', 'CHANGELOG.md'])
version = getVersionName()
group = "brainstonemod" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "BrainStoneMod"

allprojects {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

minecraft {
    version = "${minecraft_version}-${forge_version}"
    runDir = "run"
    replace '${version}', project.version
    mappings = "snapshot_20160518"
    useDepAts = true
    
    clientJvmArgs += "-Xmx2G"
    serverJvmArgs += "-Xmx2G"
}

repositories{
    maven { // JEI, Natura, Mantle, TiCon
        url "http://dvs1.progwml6.com/files/maven"
    }
    maven { // EnderIO, EnderCore, EnderZoo, The One Probe
        url "http://maven.tterrag.com"
    }
    maven { // Tesla (dependency of EnderIO)
        url "http://maven.epoxide.xyz"
    }
    maven { // ChickenBones' mods and Draconic Evolution
        url "http://chickenbones.net/maven/"
    }
    flatDir {
        dirs "lib"
    }
}

dependencies {
    // External Mods
    deobfCompile "mezz.jei:jei_${minecraft_version}:${jei_version}"
    deobfCompile "com.enderio.core:EnderCore:${minecraft_version}-${endercore_version}"
    deobfCompile "com.enderio:EnderIO:${minecraft_version}-${enderio_version}"
    compile "slimeknights:TConstruct:${minecraft_version}-${tconstruct_version}:deobf"
    compile "slimeknights.mantle:Mantle:${minecraft_version}-${mantle_version}:deobf"
    compile("com.brandon3055.draconicevolution:Draconic-Evolution:${minecraft_version}-${draconicEvolution_version}:deobf") {
        exclude module: "jei_${minecraft_version}"
        exclude module: "OpenComputers"
    }
    
    // Local Mods
    compile "lib:Baubles:+:deobf"
    compile "lib:BetterAchievements:+:deobf"
    compile "lib:ImmersiveEngineering:+:deobf"
    compile "lib:JustEnoughResources:+:deobf"
    compile "lib:Overlord:+:deobf"
}

lombok {
    version = "1.16.10"
    sha256 = "7e9079406585c67fe25f607c34b17fbed48da0a9bceb15c09a558444cefcef0e"
}

task delombok(type: DelombokTask) {
    args("src/main/java", "-d", "build/sources/delomboked/java")
}

sourceMainJava {
    source = sourceSets.main.allSource
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
    
    from MainDirResources
}

task showVersion {
    description "Displays the current version"
    group "help"
    
    compileJava.dependsOn showVersion
    deobfCompileDummyTask.dependsOn showVersion
  
    doLast {
        println version
        
        def versionFile = new File(buildDir, '.version');
    
        versionFile.getParentFile().mkdirs();
        versionFile.text = version;
    }
    
    outputs.upToDateWhen { false }
}

jar {
    doLast {
        if (!gradle.taskGraph.hasTask(reobfJar)) {
            signJar(jar)
        }
    }
}

reobfJar {
    doLast {
        signJar(jar)
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    
    doLast {
        signJar(deobfJar.archivePath)
    }
}

sourceJar {
    doLast {
        signJar(sourceJar.archivePath)
    }
}

artifacts {
    archives jar
    archives deobfJar
    archives sourceJar
}

uploadArchives {
    repositories {
        mavenDeployer {
            if (project.hasProperty("local_maven")) {
                repository(url: "file://${local_maven}")
                pom {
                    groupId = project.group
                    version = project.version
                    artifactId = project.archivesBaseName
                    project {
                        name project.archivesBaseName
                        packaging "jar"
                        description "Brain Stone Mod"
                        url "https://github.com/BrainStone/brainstone"
                        issueManagement {
                            system "github"
                            url "https://github.com/BrainStone/brainstone/issues"
                        }
                        licenses {
                            license {
                                name "License"
                                url "https://raw.githubusercontent.com/BrainStone/brainstone/master/LICENSE"
                                distribution "repo"
                            }
                        }
                        developers {
                            developer {
                                id "brainstone"
                                name "The_BrainStone"
                                roles {
                                    role "owner"
                                    role "developer"
                                }
                            }
                            developer {
                                id "fireplace"
                                name "The_Fireplace"
                                roles {
                                    role "developer"
                                }
                            }
                        }
                    }
                }
                
                // All dependencies are optional!
                pom.whenConfigured {
                    p -> p.dependencies = p.dependencies.findAll { 
                        dep -> false 
                    }
                }
            } else {
                println 'Maven upload triggered but no local_maven property found!'
            }
        }
    }
}

curseforge {
    apiKey = project.hasProperty('keyStoreAlias')? project.curseForgeApiKey : 'empty'
    
    project {
        id = '250836'
        changelog = file('CHANGELOG.md')
        changelogType = 'markdown'
        releaseType = getVersionType()
        addGameVersion '1.10.2'
        addGameVersion '1.10'
        addGameVersion '1.9.4'
        addGameVersion 'Java 8'
        
        mainArtifact jar
        addArtifact deobfJar
        addArtifact sourceJar
        
        relations {
            optionalLibrary 'baubles'
            optionalLibrary 'betterachievements'
            optionalLibrary 'draconic-evolution'
            optionalLibrary 'ender-io'
            optionalLibrary 'immersive-engineering'
            optionalLibrary 'just-enough-items-jei'
            optionalLibrary 'just-enough-resources-jer'
            optionalLibrary 'overlord'
            optionalLibrary 'tinkers-construct'
            
            //optionalLibrary 'minefactory-reloaded'
            //optionalLibrary 'thermal-foundation'
            //optionalLibrary 'thaumcraft'
        }
    }
}

task updateDownloadServer {
    dependsOn jar
    dependsOn deobfJar
    dependsOn sourceJar
    
    doLast {
        if (!project.hasProperty('secret')) {
            println "Secret needs to be set with the parameter -Psecret=xxx"
            
            return
        }
        
        def http = new HTTPBuilder('http://download.brainstonemod.com/')
        http.request( POST ) {
            uri.path = '/admin/new_version.php'
            requestContentType = URLENC
            body = [
                secret: project.secret,
                version: version,
                mc_verion: minecraft_version,
                changelog: getChangelog(),
                artifacts: JsonOutput.toJson([
                    universal: jar.archivePath.name,
                    (deobfJar.classifier): deobfJar.archivePath.name,
                    (sourceJar.classifier): sourceJar.archivePath.name
                ]),
                "artifact-universal": jar.archivePath.bytes.encodeBase64().toString(),
                ("artifact-" + deobfJar.classifier): deobfJar.archivePath.bytes.encodeBase64().toString(),
                ("artifact-" + sourceJar.classifier): sourceJar.archivePath.bytes.encodeBase64().toString()
            ]
        
            response.success = { resp, reader ->
                assert resp.status == 200
                println "POST response status: ${resp.statusLine}"
            }
        }
    }
}
