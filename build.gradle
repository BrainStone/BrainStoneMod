import static groovyx.net.http.ContentType.*
import static groovyx.net.http.Method.*

import groovy.json.*
import groovyx.net.http.HTTPBuilder
import io.franzbecker.gradle.lombok.task.DelombokTask
import java.util.regex.*

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT"
        classpath "com.github.ben-manes:gradle-versions-plugin:0.13.0"
        classpath "org.codehaus.groovy.modules.http-builder:http-builder:0.7.2"
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.0.9"
    id "io.franzbecker.gradle-lombok" version "1.8"
}
apply plugin: "com.github.ben-manes.versions"
apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: "maven"
apply plugin: "maven-publish"

def getChangelog() {
    Pattern pattern = Pattern.compile("^.+?\n-+\n\n((?:- .+?\n)+)");
    Matcher match = pattern.matcher(file("CHANGELOG.md").text.replaceAll("\r", ""));
    
    if (match.find()) {
        String res = match.group(1);
    
        return res.substring(0, res.length() - 1);
    } else {
        return "";
    }
}
def getVersionType() {
    def lower_version = version.toLowerCase();
    
    if (lower_version.contains("beta") || lower_version.contains("rc"))
        return "beta";
    else if (lower_version.contains("alpha"))
        return "alpha";
    else
        return "release";
}
def getVersionName() {
    try {
        def version;
        def tmp = "git describe --tags --dirty=-SNAPSHOT".execute().text.trim().substring(1).split("-");
        
        if (tmp.length <= 2) {
            version = tmp.join("-");
        } else {
            def versions = tmp[0].split("\\.");
            versions[2] = String.valueOf(versions[2].toInteger() + tmp[1].toInteger());
            
            version = versions.join(".") + "-development";
            
            if (tmp.length == 4)
                version += "-" + tmp[3];
        }
        
        version = "${minecraft_version}-${version}";
        
        if (mod_version_postfix.isEmpty())
            return version;
        else
            return version.replaceFirst("(-\\d+\\.\\d+\\.\\d+)", "\$1-${mod_version_postfix}");
    } catch(Exception e) {
        println e
        return "UNKNOWN-VERSION"
    }
}
def signJar(archivePath) {
    if (project.hasProperty("keyStoreAlias") && project.hasProperty("keyStore") && project.hasProperty("keyStorePass")) {
        ant.signjar(
            jar:                  archivePath,
            alias:                project.keyStoreAlias,
            keystore:             project.keyStore,
            storepass:            project.keyStorePass,
            preservelastmodified: true
        )
    } else {
        println "WARNING!!!\tCannot sign jar!"
    }
}

def MainDirResources = fileTree(dir: file("."), includes: ["README.md", "LICENSE", "CHANGELOG.md"])
def jsonPatterns = ["mcmod.info", "**/*.json", "**/*.mcmeta", "**/*.cf", "**/*.ctx"]
def commonManifest = { attributes "FMLAT": "BrainStoneMod_at.cfg" }
version = getVersionName()
group = "brainstonemod" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "BrainStoneMod"

allprojects {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

minecraft {
    version = "${minecraft_version}-${forge_version}"
    runDir = "run"
    replace '${version}', project.version
    mappings = mapping_version
    useDepAts = true
    
    clientJvmArgs += "-Xmx2G"
    serverJvmArgs += "-Xmx2G"
}

repositories {
    maven { // Home repo (also contains overlord)
        name = "BrainStoneMod"
        url "https://maven.brainstonemod.com"
    }
    maven { // JEI, Natura, Mantle, TiCon
        name = "JEI"
        url "http://dvs1.progwml6.com/files/maven"
    }
    maven { // EnderIO, EnderCore, EnderZoo, The One Probe, Chisel
        name = "tterrag"
        url "http://maven.tterrag.com"
    }
    maven { // Tesla
        name = "Tesla"
        url "https://maven.epoxide.xyz"
    }
    maven { // ChickenBone's mods and Draconic Evolution
        name = "ChickenBone's"
        url "http://chickenbones.net/maven/"
    }
    maven { // Immersive Engeneering
        name = "Blamejared"
        url "http://blamejared.com/maven"
    }
    maven { // Forestry
        name = "IC2"
        url "http://maven.ic2.player.to"
    }
    maven { // BetterAchievements, JustEnoughResources 
        name = "bintray-way2muchnoise"
        url  "https://dl.bintray.com/way2muchnoise/dev/"
    }
    maven { // CoFH
    		name = "Covers Maven"
    		url = "http://maven.covers1624.net"
    }
    flatDir {
        dirs "lib"
    }
}

dependencies {
    // External Mods
    deobfProvided "betterachievements:BetterAchievements-${minecraft_version}:${betterAchievements_version}"
    
    deobfProvided "team.chisel.ctm:CTM:MC${minecraft_version}-${ctm_version}"

    // Until mappings are updated in DE (Then remove this and exclusion under DE)
    deobfProvided("com.brandon3055.brandonscore:BrandonsCore:1.11.2-2.2.3.+:universal") {
        exclude module: "jei_${minecraft_version}"
    }
    deobfProvided ("com.brandon3055.draconicevolution:Draconic-Evolution:${minecraft_version}-${draconicEvolution_version}:universal") {
        // Until mappings are updated
        exclude module: "BrandonsCore"
        // Until mappings are updated
        exclude module: "CodeChickenLib"
        exclude module: "jei_${minecraft_version}"
        exclude module: "OpenComputers"
    }

    deobfProvided "com.enderio.core:EnderCore:${minecraft_version}-${endercore_version}"
    deobfProvided("com.enderio:EnderIO:${minecraft_version}-${enderio_version}") {
        exclude module: "appliedenergistics2"
        exclude module: "Tesla"
    }

    deobfProvided("net.sengir.forestry:forestry_${minecraft_version}:${forestry_version}") {
        exclude module: "jei_${minecraft_version}"
    }

    provided "blusunrize:ImmersiveEngineering:${immersive_engineering_version}:deobf"

    deobfProvided "mezz.jei:jei_${minecraft_version}:${jei_version}"
    
    provided "jeresources:JustEnoughResources-${minecraft_version}:${justEnoughResources_version}"
    
    deobfProvided "the_fireplace.overlord:Overlord-${minecraft_version}:${overlord_version}"

    provided "net.darkhax.tesla:Tesla:1.11-${tesla_version}:deobf"
    
    // Mappings do not match!
    deobfProvided("cofh:CoFHCore:${minecraft_version}-${coFHCore_version}:universal") {
         exclude module: "jei_${minecraft_version}"
    }
    provided("cofh:ThermalFoundation:${minecraft_version}-${thermalFoundation_version}:deobf") {
         exclude module: "CoFHCore"
    }

    // Deobf exists but Access Transformers are messed up
    deobfProvided "slimeknights.mantle:Mantle:${minecraft_version}-${mantle_version}"
    provided("slimeknights:TConstruct:${minecraft_version}-${tconstruct_version}:deobf") {
        exclude module: "jei_${minecraft_version}"
    }
    
    
    // Local Mods
    provided "lib:Baubles:+:deobf"
    provided "lib:mysticalagriculture-1.11.2:+:deobf"
}

lombok {
    version = "1.16.12"
    sha256 = "7e9079406585c67fe25f607c34b17fbed48da0a9bceb15c09a558444cefcef0e"
}

task delombok(type: DelombokTask) {
    args("src/main/java", "-d", "build/sources/delomboked/java")
}

task formatJson {
    doLast {
        sourceSets.main.resources.srcDirs.each {
            dir -> fileTree(dir: dir, includes: jsonPatterns).each {
                File file -> file.text = JsonOutput.prettyPrint(file.text) + "\n"
            }
        }
    }
}

sourceMainJava {
    source = sourceSets.main.allSource
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"
                
        // replace version and mcversion
        expand "version": project.version, "mcversion": project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }
    
    from MainDirResources
    
    rename "(.+_at.cfg)", 'META-INF/$1'
    
    // Minify json resources
    doLast {
        fileTree(dir: outputs.files.asPath, includes: jsonPatterns).each {
            File file -> file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
        }
    }
}

task showVersion {
    description "Displays the current version"
    group "help"
    
    compileJava.dependsOn showVersion
    deobfCompileDummyTask.dependsOn showVersion
    extractMcpMappings.dependsOn showVersion
  
    doLast {
        println version
        
        def versionFile = new File(buildDir, '.version');
    
        versionFile.getParentFile().mkdirs();
        versionFile.text = version;
    }
    
    outputs.upToDateWhen { false }
}

task gitTag {
    description "Tags the current version in git. Specify the version by passing \"-PtagVersion=version\""
    group "help"
    
    doLast {
        def tagVersion
    
        if ( project.hasProperty("tagVersion") ) {
            tagVersion = project.tagVersion
        } else {
            tagVersion = "v" + version.split("-")[1]
        }
        
        exec {
            executable "git"
            args "tag", "-a", tagVersion, "-m", getChangelog()
        }
    }
}

jar {
    from sourceSets.api.output
    manifest commonManifest
    
    doLast {
        if (!gradle.taskGraph.hasTask(reobfJar)) {
            signJar(jar)
        }
    }
}

reobfJar {
    doLast {
        signJar(jar)
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    from sourceSets.api.output
    classifier = "deobf"
    manifest commonManifest
    
    doLast {
        signJar(deobfJar.archivePath)
    }
}

sourceJar {
    from sourceSets.api.allSource

    doLast {
        signJar(sourceJar.archivePath)
    }
}

artifacts {
    archives jar
    archives deobfJar
    archives sourceJar
}


task checkTranslations {
    doLast {
        boolean langs_ok = true
        Map<String, String> map_en = new LinkedHashMap<String, String>()
        (file("src/main/resources/assets/brainstonemod/lang/en_US.lang")).eachLine {
              def (value1, value2) = it.tokenize( '=' )
              if (value1 == null || value2 == null) {return}
              map_en.put(value1, value2)
        }
        
        file("src/main/resources/assets/brainstonemod/lang/").eachFileMatch( ~".*\\.lang\$" ) { langfile ->
            if (!langfile.getName().contains("en_US")) {
      	        Map<String, String> map = new LinkedHashMap<String, String>()
      	        File outfile = file(langfile.getName() + ".txt")
      	        Writer outwriter = outfile.newWriter("UTF-8")
                boolean lang_ok = true
                
      	        outwriter.write("\n// Additional translations:\n")
      	        outwriter << langfile.filterLine {
      	            def (value1, value2) = it.tokenize( "=" )
      	            if (value1 == null || value2 == null) {return false}
      	            map.put(value1, value2)
                    
      	            if (map_en.containsKey(value1)) {
                        return false
                    } else {
                        lang_ok = false
                        return true
                    }
      	        }
      	        
      	        outwriter.append("\n// Missing translations:\n")
      	        for (e in map_en) {
      	            if (!map.containsKey(e.key)) {
      	                outwriter.append(e.key + "=" + e.value + "\n")
                        lang_ok = false
      	            }
      	        }
                
                outwriter.close()
                
                if (lang_ok) {
                    outfile.delete()
                } else {
                    println "Lang file " + langfile.getName() + " is not ok!"
                    println "Created translation report ${outfile}"
                    langs_ok = false
                }
            }
        }
        
        if(!langs_ok)
            println "\nSome language files are not up to date. See log above!"
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            if (project.hasProperty("local_maven")) {
                repository(url: "file://${local_maven}")
                pom {
                    groupId = project.group
                    version = project.version
                    artifactId = project.archivesBaseName
                    project {
                        name project.archivesBaseName
                        packaging "jar"
                        description "Brain Stone Mod"
                        url "https://github.com/BrainStone/brainstone"
                        scm {
                            url "https://github.com/BrainStone/brainstone"
                            connection "scm:git:git@github.com:BrainStone/brainstone.git"
                            developerConnection "scm:git:git@github.com:BrainStone/brainstone.git"
                        }
                        issueManagement {
                            system "github"
                            url "https://github.com/BrainStone/brainstone/issues"
                        }
                        licenses {
                            license {
                                name "License"
                                url "https://raw.githubusercontent.com/BrainStone/brainstone/master/LICENSE"
                                distribution "repo"
                            }
                        }
                        developers {
                            developer {
                                id "brainstone"
                                name "The_BrainStone"
                                roles {
                                    role "owner"
                                    role "developer"
                                }
                            }
                            developer {
                                id "fireplace"
                                name "The_Fireplace"
                                roles {
                                    role "developer"
                                }
                            }
                        }
                        contributors {
                            contributor {
                                name "Jobbel"
                                roles {
                                    role "texturer"
                                    role "conceptionist"
                                }
                            }
                            contributor {
                                name "Herr_Kermit"
                                roles {
                                    role "texturer"
                                }
                            }
                            contributor {
                                name "Count Grimhart"
                                roles {
                                    role "texturer"
                                    role "translator"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

curseforge {
    apiKey = project.hasProperty("curseForgeApiKey")? project.curseForgeApiKey : "empty"
    
    project {
        id = "250836"
        changelog = file("CHANGELOG.md")
        changelogType = "markdown"
        releaseType = getVersionType()
        addGameVersion "${minecraft_version}"
        addGameVersion "Java 8"
        
        mainArtifact(jar) {
            displayName = jar.archiveName.replace(".jar", "")
        }
        addArtifact(deobfJar) {
            displayName = deobfJar.archiveName.replace(".jar", "")
            changelog = "*This is a file for mod developers. If you don't know what to do with it, don't use it!*"
        }
        addArtifact(sourceJar) {
            displayName = sourceJar.archiveName.replace(".jar", "")
            changelog = "*This is a file for mod developers. If you don't know what to do with it, don't use it!*"
        }
        
        relations {
            optionalLibrary "baubles"
            optionalLibrary "betterachievements"
            optionalLibrary "ctm"
            optionalLibrary "draconic-evolution"
            optionalLibrary "ender-io"
            optionalLibrary "forestry"
            optionalLibrary "immersive-engineering"
            optionalLibrary "just-enough-items-jei"
            optionalLibrary "just-enough-resources-jer"
            optionalLibrary "overlord"
            optionalLibrary "tesla"
            optionalLibrary "thermal-foundation"
            optionalLibrary "tinkers-construct"
            
            //optionalLibrary "ex-nihilo-adscensio"
            //optionalLibrary "minefactory-reloaded"
            //optionalLibrary "thaumcraft"
        }
    }
}

task updateDownloadServer {
    dependsOn jar
    dependsOn deobfJar
    dependsOn sourceJar
    
    doLast {
        if (!project.hasProperty("secret")) {
            println "Secret needs to be set with the parameter -Psecret=xxx"
            
            return
        }
        
        def http = new HTTPBuilder("http://download.brainstonemod.com/")
        http.request( POST ) {
            uri.path = "/admin/new_version.php"
            requestContentType = URLENC
            body = [
                secret: project.secret,
                version: version,
                mc_verion: minecraft_version,
                changelog: getChangelog(),
                artifacts: JsonOutput.toJson([
                    universal: jar.archivePath.name,
                    (deobfJar.classifier): deobfJar.archivePath.name,
                    (sourceJar.classifier): sourceJar.archivePath.name
                ]),
                "artifact-universal": jar.archivePath.bytes.encodeBase64().toString(),
                ("artifact-" + deobfJar.classifier): deobfJar.archivePath.bytes.encodeBase64().toString(),
                ("artifact-" + sourceJar.classifier): sourceJar.archivePath.bytes.encodeBase64().toString()
            ]
        
            response.success = { resp, reader ->
                assert resp.status == 200
                println "POST response status: ${resp.statusLine}"
            }
        }
    }
}
