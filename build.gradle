def signJar(archivePath) {
  if (project.hasProperty('keyStoreAlias') && project.hasProperty('keyStore') && project.hasProperty('keyStorePass')) {
    ant.signjar(
      jar:                  archivePath,
      alias:                project.keyStoreAlias,
      keystore:             project.keyStore,
      storepass:            project.keyStorePass,
      preservelastmodified: true
    )
  } else {
    println 'WARNING!!!\tCannot sign jar!'
  }
}

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        jcenter()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.13.0'
    }
}

apply plugin: 'com.github.ben-manes.versions'
apply plugin: 'forge'

ext.configFile = file "build.properties"
configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = config.mod_version
group = "brainstonemod" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "BrainStoneMod"
sourceCompatibility = 1.7
targetCompatibility = 1.7

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    runDir = "eclipse"
    replace '${version}', project.version
}

dependencies {
    compile "org.projectlombok:lombok:1.16.10"
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

reobf {
    doLast {
        signJar(jar.archivePath)
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
    
    doLast {
        signJar(deobfJar.archivePath)
    }
}

task srcJar(type: Jar, dependsOn: classes) {
    classifier = 'src'
    duplicatesStrategy = 'exclude'
    
    from sourceSets.main.allSource
    
    doLast {
        signJar(srcJar.archivePath)
    }
    
    srcJar.shouldRunAfter jar
    srcJar.shouldRunAfter deobfJar
}

artifacts {
    archives jar
    archives deobfJar
    archives srcJar
}
