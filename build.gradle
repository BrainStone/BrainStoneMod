import groovy.json.*
import io.franzbecker.gradle.lombok.task.DelombokTask
import java.util.regex.*

buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath "net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT"
        classpath "org.codehaus.groovy.modules.http-builder:http-builder:0.7.2"
    }
}

plugins {
    id "com.matthewprenger.cursegradle" version "1.0.9"
    id "io.franzbecker.gradle-lombok" version "1.10"
    id "com.github.ben-manes.versions" version "0.15.0"
}
apply plugin: "com.github.ben-manes.versions"
apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: "maven"
apply plugin: "maven-publish"

def getChangelog() {
    Pattern pattern = Pattern.compile("^.+?\n-+\n\n((?:- .+?\n)+)");
    Matcher match = pattern.matcher(file("CHANGELOG.md").text.replaceAll("\r", ""));

    if (match.find()) {
        String res = match.group(1);

        return res.substring(0, res.length() - 1);
    } else {
        return "";
    }
}
def getVersionType() {
    def lower_version = version.toLowerCase();

    if (lower_version.contains("beta") || lower_version.contains("rc"))
        return "beta";
    else if (lower_version.contains("alpha"))
        return "alpha";
    else
        return "release";
}
def getVersionName() {
    try {
        def version;
        def tmp = "git describe --tags --dirty=-SNAPSHOT".execute().text.trim().substring(1).split("-");

        if (tmp.length <= 2) {
            version = tmp.join("-");
        } else {
            def versions = tmp[0].split("\\.");
            versions[2] = String.valueOf(versions[2].toInteger() + tmp[1].toInteger());

            version = versions.join(".") + "-development";

            if (tmp.length == 4)
                version += "-" + tmp[3];
        }

        version = "${minecraft_version}-${version}";

        if (mod_version_postfix.isEmpty())
            return version;
        else
            return version.replaceFirst("(-\\d+\\.\\d+\\.\\d+)", "\$1-${mod_version_postfix}");
    } catch(Exception e) {
        println e
        return "UNKNOWN-VERSION"
    }
}
def signJar(archivePath) {
    if (project.hasProperty("keyStoreAlias") && project.hasProperty("keyStore") && project.hasProperty("keyStorePass")) {
        ant.signjar(
            jar:                  archivePath,
            alias:                project.keyStoreAlias,
            keystore:             project.keyStore,
            storepass:            project.keyStorePass,
            preservelastmodified: true
        )
    } else {
        println "WARNING!!!\tCannot sign jar!"
    }
}

def MainDirResources = fileTree(dir: file("."), includes: ["README.md", "LICENSE", "CHANGELOG.md"])
def jsonPatterns = ["mcmod.info", "**/*.json", "**/*.mcmeta"]
def pngPatterns = ["**/*.png"]
def commonManifest = { attributes "FMLAT": "BrainStoneMod_at.cfg" }
version = getVersionName()
group = "brainstonemod" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "BrainStoneMod"

allprojects {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

minecraft {
    version = "${minecraft_version}-${forge_version}"
    runDir = "run"
    replace '${version}', project.version
    mappings = mapping_version
    useDepAts = true

    clientJvmArgs += "-Xmx2G"
    serverJvmArgs += "-Xmx2G"
}

repositories {
    maven { // JEI, Natura, Mantle, TiCon
        name = "JEI"
        url "http://dvs1.progwml6.com/files/maven"
    }
    maven { // EnderIO, EnderCore, EnderZoo, The One Probe, CTM
        name = "tterrag"
        url "http://maven.tterrag.com"
    }
    maven { // Tesla
        name = "Tesla"
        url "https://maven.epoxide.xyz"
    }
    maven { // ChickenBone's mods and Draconic Evolution
        name = "ChickenBone's"
        url "http://chickenbones.net/maven/"
    }
    maven { // Immersive Engeneering
        name = "Blamejared"
        url "http://blamejared.com/maven"
    }
    maven { // Forestry
        name = "IC2"
        url "http://maven.ic2.player.to"
    }
    maven { // JustEnoughResources
        name = "bintray-way2muchnoise"
        url  "https://dl.bintray.com/way2muchnoise/dev/"
    }
    maven { // CoFH
    		name = "Covers Maven"
    		url = "http://maven.covers1624.net"
    }
    flatDir {
        dirs "lib"
    }
}

dependencies {
    // External Mods
    deobfProvided "team.chisel.ctm:CTM:MC1.12-${ctm_version}"

    provided ("com.brandon3055.draconicevolution:Draconic-Evolution:1.12-${draconicEvolution_version}:deobf") {
        exclude module: "jei_${minecraft_version}"
        exclude module: "jei_1.12"
        exclude module: "OpenComputers"
    }

    // deobfProvided "com.enderio.core:EnderCore:${minecraft_version}-${endercore_version}"
    // deobfProvided("com.enderio:EnderIO:${minecraft_version}-${enderio_version}") {
    //     exclude module: "appliedenergistics2"
    //     exclude module: "Tesla"
    // }

    deobfProvided("net.sengir.forestry:forestry_${minecraft_version}:${forestry_version}") {
        exclude module: "jei_${minecraft_version}"
        exclude module: "jei_1.12"
    }

    provided "blusunrize:ImmersiveEngineering:${immersive_engineering_version}:deobf"

    deobfProvided "mezz.jei:jei_${minecraft_version}:${jei_version}"

    provided "jeresources:JustEnoughResources-${minecraft_version}:${justEnoughResources_version}:deobf"

    provided "net.darkhax.tesla:Tesla-${minecraft_version}:${tesla_version}:deobf"

    provided ("cofh:RedstoneArsenal:${minecraft_version}-${redstoneArsenal_version}:deobf") {
        exclude module: "jei_${minecraft_version}"
        exclude module: "jei_1.12"
    }

    provided("cofh:ThermalExpansion:${minecraft_version}-${thermalExpansion_version}:deobf") {
         exclude module: "jei_${minecraft_version}"
         exclude module: "jei_1.12"
    }

    // Deobf exists but Access Transformers are messed up
    deobfProvided "slimeknights.mantle:Mantle:1.12-${mantle_version}"
    provided("slimeknights:TConstruct:${minecraft_version}-${tconstruct_version}:deobf") {
        exclude module: "jei_${minecraft_version}"
    }


    // Local Mods
    provided "lib:Baubles-1.12:+:deobf"
    
    provided "lib:Overlord-${minecraft_version}:+:deobf"
    
    deobfProvided "lib:cucumber-1.12:+"
    provided "lib:mysticalagriculture-1.12:+:deobf"
}

lombok {
    version = "1.16.20"
    sha256 = "c5178b18caaa1a15e17b99ba5e4023d2de2ebc18b58cde0f5a04ca4b31c10e6d"
}

task delombok(type: DelombokTask) {
    args("src/main/java", "-d", "build/sources/delomboked/java")
}

task formatJson {
    doLast {
        sourceSets.main.resources.srcDirs.each {
            dir -> fileTree(dir: dir, includes: jsonPatterns).each {
                File file -> file.text = JsonOutput.prettyPrint(file.text) + "\n"
            }
        }
    }
}

task optimizePng {
    doLast {
        sourceSets.main.resources.srcDirs.each {
            dir -> fileTree(dir: dir, includes: pngPatterns).each { File file ->
                long size = file.length()

                exec {
                    executable "optipng"
                    args "-q", "-o7", "-zm1-9", "-strip", "all", file
                }

                long newSize = file.length()

                if (newSize < size)
                    System.out.format "Reduced File size of %s from %d bytes to %d bytes (reduced by %.2f%%)", file, size, newSize, ((double) (size - newSize)) / ((double) size) * 100.0
            }
        }
    }
}

sourceMainJava {
    source = sourceSets.main.allSource
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include "mcmod.info"

        // replace version and mcversion
        expand "version": project.version, "mcversion": project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude "mcmod.info"
    }

    from MainDirResources

    rename "(.+_at.cfg)", 'META-INF/$1'

    // Minify json resources
    doLast {
        fileTree(dir: outputs.files.asPath, includes: jsonPatterns).each {
            File file -> file.text = JsonOutput.toJson(new JsonSlurper().parse(file))
        }
    }
}

task showVersion {
    description "Displays the current version"
    group "help"

    compileJava.dependsOn showVersion
    deobfCompileDummyTask.dependsOn showVersion
    extractMcpMappings.dependsOn showVersion

    doLast {
        println version

        def versionFile = new File(buildDir, '.version');

        versionFile.getParentFile().mkdirs();
        versionFile.text = version;
    }

    outputs.upToDateWhen { false }
}

task gitTag {
    description "Tags the current version in git. Specify the version by passing \"-PtagVersion=version\""
    group "help"

    doLast {
        def tagVersion

        if ( project.hasProperty("tagVersion") ) {
            tagVersion = project.tagVersion
        } else {
            tagVersion = "v" + version.split("-")[1]
        }

        exec {
            executable "git"
            args "tag", "-a", tagVersion, "-m", getChangelog()
        }
    }
}

jar {
    manifest commonManifest

    finalizedBy reobfJar
}

reobfJar {
    doLast {
        signJar(jar)
    }
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = "deobf"
    manifest commonManifest

    doLast {
        signJar(deobfJar.archivePath)
    }
}

sourceJar {
    doLast {
        signJar(sourceJar.archivePath)
    }
}

artifacts {
    archives jar
    archives deobfJar
    archives sourceJar
}


task checkTranslations {
    doLast {
        boolean langs_ok = true
        Map<String, String> map_en = new LinkedHashMap<String, String>()
        (file("src/main/resources/assets/brainstonemod/lang/en_US.lang")).eachLine {
              def (value1, value2) = it.tokenize( '=' )
              if (value1 == null || value2 == null) {return}
              map_en.put(value1, value2)
        }

        file("src/main/resources/assets/brainstonemod/lang/").eachFileMatch( ~".*\\.lang\$" ) { langfile ->
            if (!langfile.getName().contains("en_US")) {
      	        Map<String, String> map = new LinkedHashMap<String, String>()
      	        File outfile = file(langfile.getName() + ".txt")
      	        Writer outwriter = outfile.newWriter("UTF-8")
                boolean lang_ok = true

      	        outwriter.write("\n// Additional translations:\n")
      	        outwriter << langfile.filterLine {
      	            def (value1, value2) = it.tokenize( "=" )
      	            if (value1 == null || value2 == null) {return false}
      	            map.put(value1, value2)

      	            if (map_en.containsKey(value1)) {
                        return false
                    } else {
                        lang_ok = false
                        return true
                    }
      	        }

      	        outwriter.append("\n// Missing translations:\n")
      	        for (e in map_en) {
      	            if (!map.containsKey(e.key)) {
      	                outwriter.append(e.key + "=" + e.value + "\n")
                        lang_ok = false
      	            }
      	        }

                outwriter.close()

                if (lang_ok) {
                    outfile.delete()
                } else {
                    println "Lang file " + langfile.getName() + " is not ok!"
                    println "Created translation report ${outfile}"
                    langs_ok = false
                }
            }
        }

        if(!langs_ok)
            println "\nSome language files are not up to date. See log above!"
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            if (project.hasProperty("local_maven")) {
                repository(url: "file://${local_maven}")
                pom {
                    groupId = project.group
                    version = project.version
                    artifactId = project.archivesBaseName
                    project {
                        name project.archivesBaseName
                        packaging "jar"
                        description "Brain Stone Mod"
                        url "https://github.com/BrainStone/brainstone"
                        scm {
                            url "https://github.com/BrainStone/brainstone"
                            connection "scm:git:git@github.com:BrainStone/brainstone.git"
                            developerConnection "scm:git:git@github.com:BrainStone/brainstone.git"
                        }
                        issueManagement {
                            system "github"
                            url "https://github.com/BrainStone/brainstone/issues"
                        }
                        licenses {
                            license {
                                name "License"
                                url "https://raw.githubusercontent.com/BrainStone/brainstone/master/LICENSE"
                                distribution "repo"
                            }
                        }
                        developers {
                            developer {
                                id "brainstone"
                                name "The_BrainStone"
                                roles {
                                    role "owner"
                                    role "developer"
                                }
                            }
                            developer {
                                id "fireplace"
                                name "The_Fireplace"
                                roles {
                                    role "developer"
                                }
                            }
                        }
                        contributors {
                            contributor {
                                name "Jobbel"
                                roles {
                                    role "texturer"
                                    role "conceptionist"
                                }
                            }
                            contributor {
                                name "Herr_Kermit"
                                roles {
                                    role "texturer"
                                }
                            }
                            contributor {
                                name "Count Grimhart"
                                roles {
                                    role "texturer"
                                    role "translator"
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}

curseforge {
    apiKey = project.hasProperty("curseForgeApiKey")? project.curseForgeApiKey : "empty"

    project {
        id = "250836"
        changelog = file("CHANGELOG.md")
        changelogType = "markdown"
        releaseType = getVersionType()
        addGameVersion "${minecraft_version}"
        addGameVersion "Java 8"

        mainArtifact(jar) {
            displayName = jar.archiveName.replace(".jar", "")
        }
        addArtifact(deobfJar) {
            displayName = deobfJar.archiveName.replace(".jar", "")
            changelog = "*This is a file for mod developers. If you don't know what to do with it, don't use it!*"
        }
        addArtifact(sourceJar) {
            displayName = sourceJar.archiveName.replace(".jar", "")
            changelog = "*This is a file for mod developers. If you don't know what to do with it, don't use it!*"
        }

        relations {
            optionalLibrary "baubles"
            requiredLibrary "ctm"
            optionalLibrary "draconic-evolution"
            optionalLibrary "environmental-tech"
            optionalLibrary "forestry"
            optionalLibrary "immersive-engineering"
            optionalLibrary "just-enough-items-jei"
            optionalLibrary "just-enough-resources-jer"
            optionalLibrary "overlord"
            optionalLibrary "tesla"
            optionalLibrary "thermalexpansion"
            optionalLibrary "thermal-foundation"
            optionalLibrary "tinkers-construct"

            //optionalLibrary "ender-io"
            //optionalLibrary "ex-nihilo-adscensio"
            //optionalLibrary "minefactory-reloaded"
            //optionalLibrary "thaumcraft"
        }
    }
}
